/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductsRouteImport } from './routes/products/route'
import { Route as CategoriesRouteImport } from './routes/categories/route'
import { Route as ProductsNewRouteImport } from './routes/products/new/route'
import { Route as ProductsProductIdRouteImport } from './routes/products/$productId/route'
import { Route as ProductsProductIdEditRouteImport } from './routes/products/$productId/edit/route'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ProductsIndexLazyImport = createFileRoute('/products/')()
const ProductsProductIdIndexLazyImport = createFileRoute(
  '/products/$productId/',
)()

// Create/Update Routes

const ProductsRouteRoute = ProductsRouteImport.update({
  path: '/products',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/products/route.lazy').then((d) => d.Route),
)

const CategoriesRouteRoute = CategoriesRouteImport.update({
  path: '/categories',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/categories/route.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductsIndexLazyRoute = ProductsIndexLazyImport.update({
  path: '/',
  getParentRoute: () => ProductsRouteRoute,
} as any).lazy(() =>
  import('./routes/products/index.lazy').then((d) => d.Route),
)

const ProductsNewRouteRoute = ProductsNewRouteImport.update({
  path: '/new',
  getParentRoute: () => ProductsRouteRoute,
} as any).lazy(() =>
  import('./routes/products/new/route.lazy').then((d) => d.Route),
)

const ProductsProductIdRouteRoute = ProductsProductIdRouteImport.update({
  path: '/$productId',
  getParentRoute: () => ProductsRouteRoute,
} as any).lazy(() =>
  import('./routes/products/$productId/route.lazy').then((d) => d.Route),
)

const ProductsProductIdIndexLazyRoute = ProductsProductIdIndexLazyImport.update(
  {
    path: '/',
    getParentRoute: () => ProductsProductIdRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/products/$productId/index.lazy').then((d) => d.Route),
)

const ProductsProductIdEditRouteRoute = ProductsProductIdEditRouteImport.update(
  {
    path: '/edit',
    getParentRoute: () => ProductsProductIdRouteRoute,
  } as any,
).lazy(() =>
  import('./routes/products/$productId/edit/route.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesRouteImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRoute
    }
    '/products/$productId': {
      id: '/products/$productId'
      path: '/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductsProductIdRouteImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/new': {
      id: '/products/new'
      path: '/new'
      fullPath: '/products/new'
      preLoaderRoute: typeof ProductsNewRouteImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexLazyImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/$productId/edit': {
      id: '/products/$productId/edit'
      path: '/edit'
      fullPath: '/products/$productId/edit'
      preLoaderRoute: typeof ProductsProductIdEditRouteImport
      parentRoute: typeof ProductsProductIdRouteImport
    }
    '/products/$productId/': {
      id: '/products/$productId/'
      path: '/'
      fullPath: '/products/$productId/'
      preLoaderRoute: typeof ProductsProductIdIndexLazyImport
      parentRoute: typeof ProductsProductIdRouteImport
    }
  }
}

// Create and export the route tree

interface ProductsProductIdRouteRouteChildren {
  ProductsProductIdEditRouteRoute: typeof ProductsProductIdEditRouteRoute
  ProductsProductIdIndexLazyRoute: typeof ProductsProductIdIndexLazyRoute
}

const ProductsProductIdRouteRouteChildren: ProductsProductIdRouteRouteChildren =
  {
    ProductsProductIdEditRouteRoute: ProductsProductIdEditRouteRoute,
    ProductsProductIdIndexLazyRoute: ProductsProductIdIndexLazyRoute,
  }

const ProductsProductIdRouteRouteWithChildren =
  ProductsProductIdRouteRoute._addFileChildren(
    ProductsProductIdRouteRouteChildren,
  )

interface ProductsRouteRouteChildren {
  ProductsProductIdRouteRoute: typeof ProductsProductIdRouteRouteWithChildren
  ProductsNewRouteRoute: typeof ProductsNewRouteRoute
  ProductsIndexLazyRoute: typeof ProductsIndexLazyRoute
}

const ProductsRouteRouteChildren: ProductsRouteRouteChildren = {
  ProductsProductIdRouteRoute: ProductsProductIdRouteRouteWithChildren,
  ProductsNewRouteRoute: ProductsNewRouteRoute,
  ProductsIndexLazyRoute: ProductsIndexLazyRoute,
}

const ProductsRouteRouteWithChildren = ProductsRouteRoute._addFileChildren(
  ProductsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/categories': typeof CategoriesRouteRoute
  '/products': typeof ProductsRouteRouteWithChildren
  '/products/$productId': typeof ProductsProductIdRouteRouteWithChildren
  '/products/new': typeof ProductsNewRouteRoute
  '/products/': typeof ProductsIndexLazyRoute
  '/products/$productId/edit': typeof ProductsProductIdEditRouteRoute
  '/products/$productId/': typeof ProductsProductIdIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/categories': typeof CategoriesRouteRoute
  '/products/new': typeof ProductsNewRouteRoute
  '/products': typeof ProductsIndexLazyRoute
  '/products/$productId/edit': typeof ProductsProductIdEditRouteRoute
  '/products/$productId': typeof ProductsProductIdIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/categories': typeof CategoriesRouteRoute
  '/products': typeof ProductsRouteRouteWithChildren
  '/products/$productId': typeof ProductsProductIdRouteRouteWithChildren
  '/products/new': typeof ProductsNewRouteRoute
  '/products/': typeof ProductsIndexLazyRoute
  '/products/$productId/edit': typeof ProductsProductIdEditRouteRoute
  '/products/$productId/': typeof ProductsProductIdIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/categories'
    | '/products'
    | '/products/$productId'
    | '/products/new'
    | '/products/'
    | '/products/$productId/edit'
    | '/products/$productId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/categories'
    | '/products/new'
    | '/products'
    | '/products/$productId/edit'
    | '/products/$productId'
  id:
    | '__root__'
    | '/'
    | '/categories'
    | '/products'
    | '/products/$productId'
    | '/products/new'
    | '/products/'
    | '/products/$productId/edit'
    | '/products/$productId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CategoriesRouteRoute: typeof CategoriesRouteRoute
  ProductsRouteRoute: typeof ProductsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CategoriesRouteRoute: CategoriesRouteRoute,
  ProductsRouteRoute: ProductsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/categories",
        "/products"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/categories": {
      "filePath": "categories/route.tsx"
    },
    "/products": {
      "filePath": "products/route.tsx",
      "children": [
        "/products/$productId",
        "/products/new",
        "/products/"
      ]
    },
    "/products/$productId": {
      "filePath": "products/$productId/route.tsx",
      "parent": "/products",
      "children": [
        "/products/$productId/edit",
        "/products/$productId/"
      ]
    },
    "/products/new": {
      "filePath": "products/new/route.tsx",
      "parent": "/products"
    },
    "/products/": {
      "filePath": "products/index.lazy.tsx",
      "parent": "/products"
    },
    "/products/$productId/edit": {
      "filePath": "products/$productId/edit/route.tsx",
      "parent": "/products/$productId"
    },
    "/products/$productId/": {
      "filePath": "products/$productId/index.lazy.tsx",
      "parent": "/products/$productId"
    }
  }
}
ROUTE_MANIFEST_END */
